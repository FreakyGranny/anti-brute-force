// Code generated by MockGen. DO NOT EDIT.
// Source: entity.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	storage "github.com/FreakyGranny/anti-brute-force/internal/storage"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockStorage is a mock of Storage interface
type MockStorage struct {
	ctrl     *gomock.Controller
	recorder *MockStorageMockRecorder
}

// MockStorageMockRecorder is the mock recorder for MockStorage
type MockStorageMockRecorder struct {
	mock *MockStorage
}

// NewMockStorage creates a new mock instance
func NewMockStorage(ctrl *gomock.Controller) *MockStorage {
	mock := &MockStorage{ctrl: ctrl}
	mock.recorder = &MockStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockStorage) EXPECT() *MockStorageMockRecorder {
	return m.recorder
}

// AddToWhiteList mocks base method
func (m *MockStorage) AddToWhiteList(ctx context.Context, e *storage.IPNet) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddToWhiteList", ctx, e)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddToWhiteList indicates an expected call of AddToWhiteList
func (mr *MockStorageMockRecorder) AddToWhiteList(ctx, e interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddToWhiteList", reflect.TypeOf((*MockStorage)(nil).AddToWhiteList), ctx, e)
}

// AddToBlackList mocks base method
func (m *MockStorage) AddToBlackList(ctx context.Context, e *storage.IPNet) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddToBlackList", ctx, e)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddToBlackList indicates an expected call of AddToBlackList
func (mr *MockStorageMockRecorder) AddToBlackList(ctx, e interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddToBlackList", reflect.TypeOf((*MockStorage)(nil).AddToBlackList), ctx, e)
}

// RemoveFromWhiteList mocks base method
func (m *MockStorage) RemoveFromWhiteList(ctx context.Context, id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveFromWhiteList", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveFromWhiteList indicates an expected call of RemoveFromWhiteList
func (mr *MockStorageMockRecorder) RemoveFromWhiteList(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveFromWhiteList", reflect.TypeOf((*MockStorage)(nil).RemoveFromWhiteList), ctx, id)
}

// RemoveFromBlackList mocks base method
func (m *MockStorage) RemoveFromBlackList(ctx context.Context, id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveFromBlackList", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveFromBlackList indicates an expected call of RemoveFromBlackList
func (mr *MockStorageMockRecorder) RemoveFromBlackList(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveFromBlackList", reflect.TypeOf((*MockStorage)(nil).RemoveFromBlackList), ctx, id)
}

// GetBlackList mocks base method
func (m *MockStorage) GetBlackList(ctx context.Context) ([]*storage.IPNet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlackList", ctx)
	ret0, _ := ret[0].([]*storage.IPNet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlackList indicates an expected call of GetBlackList
func (mr *MockStorageMockRecorder) GetBlackList(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlackList", reflect.TypeOf((*MockStorage)(nil).GetBlackList), ctx)
}

// GetWhiteList mocks base method
func (m *MockStorage) GetWhiteList(ctx context.Context) ([]*storage.IPNet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWhiteList", ctx)
	ret0, _ := ret[0].([]*storage.IPNet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWhiteList indicates an expected call of GetWhiteList
func (mr *MockStorageMockRecorder) GetWhiteList(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWhiteList", reflect.TypeOf((*MockStorage)(nil).GetWhiteList), ctx)
}

// Close mocks base method
func (m *MockStorage) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (mr *MockStorageMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockStorage)(nil).Close))
}
