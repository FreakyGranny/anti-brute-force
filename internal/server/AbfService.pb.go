// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.12.4
// source: AbfService.proto

package server

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type AuthRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Login    string `protobuf:"bytes,1,opt,name=login,proto3" json:"login,omitempty"`
	Password string `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
	Ip       string `protobuf:"bytes,3,opt,name=ip,proto3" json:"ip,omitempty"`
}

func (x *AuthRequest) Reset() {
	*x = AuthRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_AbfService_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthRequest) ProtoMessage() {}

func (x *AuthRequest) ProtoReflect() protoreflect.Message {
	mi := &file_AbfService_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthRequest.ProtoReflect.Descriptor instead.
func (*AuthRequest) Descriptor() ([]byte, []int) {
	return file_AbfService_proto_rawDescGZIP(), []int{0}
}

func (x *AuthRequest) GetLogin() string {
	if x != nil {
		return x.Login
	}
	return ""
}

func (x *AuthRequest) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *AuthRequest) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

type AuthResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ok bool `protobuf:"varint,1,opt,name=ok,proto3" json:"ok,omitempty"`
}

func (x *AuthResponse) Reset() {
	*x = AuthResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_AbfService_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthResponse) ProtoMessage() {}

func (x *AuthResponse) ProtoReflect() protoreflect.Message {
	mi := &file_AbfService_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthResponse.ProtoReflect.Descriptor instead.
func (*AuthResponse) Descriptor() ([]byte, []int) {
	return file_AbfService_proto_rawDescGZIP(), []int{1}
}

func (x *AuthResponse) GetOk() bool {
	if x != nil {
		return x.Ok
	}
	return false
}

type AddSubnetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ip   string `protobuf:"bytes,1,opt,name=ip,proto3" json:"ip,omitempty"`
	Mask string `protobuf:"bytes,2,opt,name=mask,proto3" json:"mask,omitempty"`
}

func (x *AddSubnetRequest) Reset() {
	*x = AddSubnetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_AbfService_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddSubnetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddSubnetRequest) ProtoMessage() {}

func (x *AddSubnetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_AbfService_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddSubnetRequest.ProtoReflect.Descriptor instead.
func (*AddSubnetRequest) Descriptor() ([]byte, []int) {
	return file_AbfService_proto_rawDescGZIP(), []int{2}
}

func (x *AddSubnetRequest) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *AddSubnetRequest) GetMask() string {
	if x != nil {
		return x.Mask
	}
	return ""
}

type AddSubnetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ip   string `protobuf:"bytes,1,opt,name=ip,proto3" json:"ip,omitempty"`
	Mask string `protobuf:"bytes,2,opt,name=mask,proto3" json:"mask,omitempty"`
}

func (x *AddSubnetResponse) Reset() {
	*x = AddSubnetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_AbfService_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddSubnetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddSubnetResponse) ProtoMessage() {}

func (x *AddSubnetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_AbfService_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddSubnetResponse.ProtoReflect.Descriptor instead.
func (*AddSubnetResponse) Descriptor() ([]byte, []int) {
	return file_AbfService_proto_rawDescGZIP(), []int{3}
}

func (x *AddSubnetResponse) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *AddSubnetResponse) GetMask() string {
	if x != nil {
		return x.Mask
	}
	return ""
}

type RemoveSubnetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ip   string `protobuf:"bytes,1,opt,name=ip,proto3" json:"ip,omitempty"`
	Mask string `protobuf:"bytes,2,opt,name=mask,proto3" json:"mask,omitempty"`
}

func (x *RemoveSubnetRequest) Reset() {
	*x = RemoveSubnetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_AbfService_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveSubnetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveSubnetRequest) ProtoMessage() {}

func (x *RemoveSubnetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_AbfService_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveSubnetRequest.ProtoReflect.Descriptor instead.
func (*RemoveSubnetRequest) Descriptor() ([]byte, []int) {
	return file_AbfService_proto_rawDescGZIP(), []int{4}
}

func (x *RemoveSubnetRequest) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *RemoveSubnetRequest) GetMask() string {
	if x != nil {
		return x.Mask
	}
	return ""
}

type DropStatRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Login    string `protobuf:"bytes,1,opt,name=login,proto3" json:"login,omitempty"`
	Password string `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
}

func (x *DropStatRequest) Reset() {
	*x = DropStatRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_AbfService_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DropStatRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DropStatRequest) ProtoMessage() {}

func (x *DropStatRequest) ProtoReflect() protoreflect.Message {
	mi := &file_AbfService_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DropStatRequest.ProtoReflect.Descriptor instead.
func (*DropStatRequest) Descriptor() ([]byte, []int) {
	return file_AbfService_proto_rawDescGZIP(), []int{5}
}

func (x *DropStatRequest) GetLogin() string {
	if x != nil {
		return x.Login
	}
	return ""
}

func (x *DropStatRequest) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

var File_AbfService_proto protoreflect.FileDescriptor

var file_AbfService_proto_rawDesc = []byte{
	0x0a, 0x10, 0x41, 0x62, 0x66, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x0b, 0x61, 0x62, 0x72, 0x75, 0x74, 0x65, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x1a,
	0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x4f, 0x0a, 0x0b,
	0x41, 0x75, 0x74, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c,
	0x6f, 0x67, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x6f, 0x67, 0x69,
	0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x70, 0x22, 0x1e, 0x0a,
	0x0c, 0x41, 0x75, 0x74, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a,
	0x02, 0x6f, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x02, 0x6f, 0x6b, 0x22, 0x36, 0x0a,
	0x10, 0x41, 0x64, 0x64, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x70, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6d, 0x61, 0x73, 0x6b, 0x22, 0x37, 0x0a, 0x11, 0x41, 0x64, 0x64, 0x53, 0x75, 0x62, 0x6e,
	0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x61,
	0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6d, 0x61, 0x73, 0x6b, 0x22, 0x39,
	0x0a, 0x13, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6d, 0x61, 0x73, 0x6b, 0x22, 0x43, 0x0a, 0x0f, 0x44, 0x72, 0x6f,
	0x70, 0x53, 0x74, 0x61, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x6f, 0x67,
	0x69, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x32, 0xdc,
	0x03, 0x0a, 0x0b, 0x41, 0x42, 0x72, 0x75, 0x74, 0x65, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x12, 0x3d,
	0x0a, 0x04, 0x41, 0x75, 0x74, 0x68, 0x12, 0x18, 0x2e, 0x61, 0x62, 0x72, 0x75, 0x74, 0x65, 0x66,
	0x6f, 0x72, 0x63, 0x65, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x19, 0x2e, 0x61, 0x62, 0x72, 0x75, 0x74, 0x65, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x2e, 0x41,
	0x75, 0x74, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x51, 0x0a,
	0x0e, 0x41, 0x64, 0x64, 0x54, 0x6f, 0x57, 0x68, 0x69, 0x74, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x1d, 0x2e, 0x61, 0x62, 0x72, 0x75, 0x74, 0x65, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x2e, 0x41, 0x64,
	0x64, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e,
	0x2e, 0x61, 0x62, 0x72, 0x75, 0x74, 0x65, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x2e, 0x41, 0x64, 0x64,
	0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x51, 0x0a, 0x0e, 0x41, 0x64, 0x64, 0x54, 0x6f, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x1d, 0x2e, 0x61, 0x62, 0x72, 0x75, 0x74, 0x65, 0x66, 0x6f, 0x72, 0x63, 0x65,
	0x2e, 0x41, 0x64, 0x64, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1e, 0x2e, 0x61, 0x62, 0x72, 0x75, 0x74, 0x65, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x2e,
	0x41, 0x64, 0x64, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x51, 0x0a, 0x13, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x46, 0x72, 0x6f,
	0x6d, 0x57, 0x68, 0x69, 0x74, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x20, 0x2e, 0x61, 0x62, 0x72,
	0x75, 0x74, 0x65, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x53,
	0x75, 0x62, 0x6e, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x51, 0x0a, 0x13, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x46, 0x72, 0x6f, 0x6d, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x20, 0x2e,
	0x61, 0x62, 0x72, 0x75, 0x74, 0x65, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x6d, 0x6f,
	0x76, 0x65, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x42, 0x0a, 0x08, 0x44, 0x72, 0x6f,
	0x70, 0x53, 0x74, 0x61, 0x74, 0x12, 0x1c, 0x2e, 0x61, 0x62, 0x72, 0x75, 0x74, 0x65, 0x66, 0x6f,
	0x72, 0x63, 0x65, 0x2e, 0x44, 0x72, 0x6f, 0x70, 0x53, 0x74, 0x61, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x42, 0x0a, 0x5a,
	0x08, 0x2e, 0x3b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_AbfService_proto_rawDescOnce sync.Once
	file_AbfService_proto_rawDescData = file_AbfService_proto_rawDesc
)

func file_AbfService_proto_rawDescGZIP() []byte {
	file_AbfService_proto_rawDescOnce.Do(func() {
		file_AbfService_proto_rawDescData = protoimpl.X.CompressGZIP(file_AbfService_proto_rawDescData)
	})
	return file_AbfService_proto_rawDescData
}

var file_AbfService_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_AbfService_proto_goTypes = []interface{}{
	(*AuthRequest)(nil),         // 0: abruteforce.AuthRequest
	(*AuthResponse)(nil),        // 1: abruteforce.AuthResponse
	(*AddSubnetRequest)(nil),    // 2: abruteforce.AddSubnetRequest
	(*AddSubnetResponse)(nil),   // 3: abruteforce.AddSubnetResponse
	(*RemoveSubnetRequest)(nil), // 4: abruteforce.RemoveSubnetRequest
	(*DropStatRequest)(nil),     // 5: abruteforce.DropStatRequest
	(*empty.Empty)(nil),         // 6: google.protobuf.Empty
}
var file_AbfService_proto_depIdxs = []int32{
	0, // 0: abruteforce.ABruteforce.Auth:input_type -> abruteforce.AuthRequest
	2, // 1: abruteforce.ABruteforce.AddToWhiteList:input_type -> abruteforce.AddSubnetRequest
	2, // 2: abruteforce.ABruteforce.AddToBlackList:input_type -> abruteforce.AddSubnetRequest
	4, // 3: abruteforce.ABruteforce.RemoveFromWhiteList:input_type -> abruteforce.RemoveSubnetRequest
	4, // 4: abruteforce.ABruteforce.RemoveFromBlackList:input_type -> abruteforce.RemoveSubnetRequest
	5, // 5: abruteforce.ABruteforce.DropStat:input_type -> abruteforce.DropStatRequest
	1, // 6: abruteforce.ABruteforce.Auth:output_type -> abruteforce.AuthResponse
	3, // 7: abruteforce.ABruteforce.AddToWhiteList:output_type -> abruteforce.AddSubnetResponse
	3, // 8: abruteforce.ABruteforce.AddToBlackList:output_type -> abruteforce.AddSubnetResponse
	6, // 9: abruteforce.ABruteforce.RemoveFromWhiteList:output_type -> google.protobuf.Empty
	6, // 10: abruteforce.ABruteforce.RemoveFromBlackList:output_type -> google.protobuf.Empty
	6, // 11: abruteforce.ABruteforce.DropStat:output_type -> google.protobuf.Empty
	6, // [6:12] is the sub-list for method output_type
	0, // [0:6] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_AbfService_proto_init() }
func file_AbfService_proto_init() {
	if File_AbfService_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_AbfService_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_AbfService_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_AbfService_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddSubnetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_AbfService_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddSubnetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_AbfService_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveSubnetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_AbfService_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DropStatRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_AbfService_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_AbfService_proto_goTypes,
		DependencyIndexes: file_AbfService_proto_depIdxs,
		MessageInfos:      file_AbfService_proto_msgTypes,
	}.Build()
	File_AbfService_proto = out.File
	file_AbfService_proto_rawDesc = nil
	file_AbfService_proto_goTypes = nil
	file_AbfService_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ABruteforceClient is the client API for ABruteforce service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ABruteforceClient interface {
	Auth(ctx context.Context, in *AuthRequest, opts ...grpc.CallOption) (*AuthResponse, error)
	AddToWhiteList(ctx context.Context, in *AddSubnetRequest, opts ...grpc.CallOption) (*AddSubnetResponse, error)
	AddToBlackList(ctx context.Context, in *AddSubnetRequest, opts ...grpc.CallOption) (*AddSubnetResponse, error)
	RemoveFromWhiteList(ctx context.Context, in *RemoveSubnetRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	RemoveFromBlackList(ctx context.Context, in *RemoveSubnetRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	DropStat(ctx context.Context, in *DropStatRequest, opts ...grpc.CallOption) (*empty.Empty, error)
}

type aBruteforceClient struct {
	cc grpc.ClientConnInterface
}

func NewABruteforceClient(cc grpc.ClientConnInterface) ABruteforceClient {
	return &aBruteforceClient{cc}
}

func (c *aBruteforceClient) Auth(ctx context.Context, in *AuthRequest, opts ...grpc.CallOption) (*AuthResponse, error) {
	out := new(AuthResponse)
	err := c.cc.Invoke(ctx, "/abruteforce.ABruteforce/Auth", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aBruteforceClient) AddToWhiteList(ctx context.Context, in *AddSubnetRequest, opts ...grpc.CallOption) (*AddSubnetResponse, error) {
	out := new(AddSubnetResponse)
	err := c.cc.Invoke(ctx, "/abruteforce.ABruteforce/AddToWhiteList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aBruteforceClient) AddToBlackList(ctx context.Context, in *AddSubnetRequest, opts ...grpc.CallOption) (*AddSubnetResponse, error) {
	out := new(AddSubnetResponse)
	err := c.cc.Invoke(ctx, "/abruteforce.ABruteforce/AddToBlackList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aBruteforceClient) RemoveFromWhiteList(ctx context.Context, in *RemoveSubnetRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/abruteforce.ABruteforce/RemoveFromWhiteList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aBruteforceClient) RemoveFromBlackList(ctx context.Context, in *RemoveSubnetRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/abruteforce.ABruteforce/RemoveFromBlackList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aBruteforceClient) DropStat(ctx context.Context, in *DropStatRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/abruteforce.ABruteforce/DropStat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ABruteforceServer is the server API for ABruteforce service.
type ABruteforceServer interface {
	Auth(context.Context, *AuthRequest) (*AuthResponse, error)
	AddToWhiteList(context.Context, *AddSubnetRequest) (*AddSubnetResponse, error)
	AddToBlackList(context.Context, *AddSubnetRequest) (*AddSubnetResponse, error)
	RemoveFromWhiteList(context.Context, *RemoveSubnetRequest) (*empty.Empty, error)
	RemoveFromBlackList(context.Context, *RemoveSubnetRequest) (*empty.Empty, error)
	DropStat(context.Context, *DropStatRequest) (*empty.Empty, error)
}

// UnimplementedABruteforceServer can be embedded to have forward compatible implementations.
type UnimplementedABruteforceServer struct {
}

func (*UnimplementedABruteforceServer) Auth(context.Context, *AuthRequest) (*AuthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Auth not implemented")
}
func (*UnimplementedABruteforceServer) AddToWhiteList(context.Context, *AddSubnetRequest) (*AddSubnetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddToWhiteList not implemented")
}
func (*UnimplementedABruteforceServer) AddToBlackList(context.Context, *AddSubnetRequest) (*AddSubnetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddToBlackList not implemented")
}
func (*UnimplementedABruteforceServer) RemoveFromWhiteList(context.Context, *RemoveSubnetRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveFromWhiteList not implemented")
}
func (*UnimplementedABruteforceServer) RemoveFromBlackList(context.Context, *RemoveSubnetRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveFromBlackList not implemented")
}
func (*UnimplementedABruteforceServer) DropStat(context.Context, *DropStatRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DropStat not implemented")
}

func RegisterABruteforceServer(s *grpc.Server, srv ABruteforceServer) {
	s.RegisterService(&_ABruteforce_serviceDesc, srv)
}

func _ABruteforce_Auth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ABruteforceServer).Auth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/abruteforce.ABruteforce/Auth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ABruteforceServer).Auth(ctx, req.(*AuthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ABruteforce_AddToWhiteList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddSubnetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ABruteforceServer).AddToWhiteList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/abruteforce.ABruteforce/AddToWhiteList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ABruteforceServer).AddToWhiteList(ctx, req.(*AddSubnetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ABruteforce_AddToBlackList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddSubnetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ABruteforceServer).AddToBlackList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/abruteforce.ABruteforce/AddToBlackList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ABruteforceServer).AddToBlackList(ctx, req.(*AddSubnetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ABruteforce_RemoveFromWhiteList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveSubnetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ABruteforceServer).RemoveFromWhiteList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/abruteforce.ABruteforce/RemoveFromWhiteList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ABruteforceServer).RemoveFromWhiteList(ctx, req.(*RemoveSubnetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ABruteforce_RemoveFromBlackList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveSubnetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ABruteforceServer).RemoveFromBlackList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/abruteforce.ABruteforce/RemoveFromBlackList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ABruteforceServer).RemoveFromBlackList(ctx, req.(*RemoveSubnetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ABruteforce_DropStat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DropStatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ABruteforceServer).DropStat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/abruteforce.ABruteforce/DropStat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ABruteforceServer).DropStat(ctx, req.(*DropStatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ABruteforce_serviceDesc = grpc.ServiceDesc{
	ServiceName: "abruteforce.ABruteforce",
	HandlerType: (*ABruteforceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Auth",
			Handler:    _ABruteforce_Auth_Handler,
		},
		{
			MethodName: "AddToWhiteList",
			Handler:    _ABruteforce_AddToWhiteList_Handler,
		},
		{
			MethodName: "AddToBlackList",
			Handler:    _ABruteforce_AddToBlackList_Handler,
		},
		{
			MethodName: "RemoveFromWhiteList",
			Handler:    _ABruteforce_RemoveFromWhiteList_Handler,
		},
		{
			MethodName: "RemoveFromBlackList",
			Handler:    _ABruteforce_RemoveFromBlackList_Handler,
		},
		{
			MethodName: "DropStat",
			Handler:    _ABruteforce_DropStat_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "AbfService.proto",
}
